PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <NEWVAR: "newVar">
| <TIPO: "int" | "bool">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <PRINT: "System.output">
| <FUNC: "func">
| <BOOL: "true" | "false">
}

TOKEN :
{
  <IGUAL: "==">
| <ADICAO: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">
| <MENOR: "<">
| <MAIOR: ">">
}

TOKEN :
{
 <ACHAVES: "{">
| <FCHAVES: "}">
| <PONTOEVIRGULA: ";">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <ATRIB: "=">
| <VIRGULA: ",">
}

TOKEN :
{
 <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+ )*>
| <NUMLITERAL: (["0"-"9"])+ ("." (["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"])+ )?>
}



void Karloff () :
{Token t;}
{

(
  <MAIN> { System.out.println("Palavra reservada: main");}
| <VOID> { System.out.println("Palavra reservada: void");}
| <NEWVAR> { System.out.println("Palavra reservada: newVar");}
| t=<TIPO> { System.out.println("Palavra reservada: "+t.image);}
| <IF> { System.out.println("Palavra reservada: if");}
| <THEN> { System.out.println("Palavra reservada: then");}
| <WHILE> { System.out.println("Palavra reservada: while");}
| <REPEAT> { System.out.println("Palavra reservada: repeat");}
| <UNTIL> { System.out.println("Palavra reservada: until");}
| <RETURN> { System.out.println("Palavra reservada: return");}
| <PRINT> { System.out.println("Palavra reservada: System.output");}
| <FUNC> { System.out.println("Palavra reservada: func");}
| t=<BOOL> { System.out.println("Palavra reservada: "+t.image);}
| <IGUAL> { System.out.println("Igual");}
| <ADICAO> { System.out.println("Adição");}
| <SUB> { System.out.println("Subtração");}
| <MULT> { System.out.println("Multiplicação");}
| <DIV> { System.out.println("Divisão");}
| <AND> { System.out.println("And");}
| <OR> { System.out.println("Or");}
| <MENOR> { System.out.println("Menor que");}
| <MAIOR> { System.out.println("Maior que");}
| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <PONTOEVIRGULA> { System.out.println("Ponto e vírgula");}
| <APARENTESES> { System.out.println("Abre parênteses");}
| <FPARENTESES> { System.out.println("Fecha parênteses");}
| <ATRIB> { System.out.println("Atribuição");}
| <VIRGULA> { System.out.println("Vírgula");}
| t=<NUMLITERAL> { System.out.println("Número: "+ t.image);}
| t=<ID> { System.out.println("Identificador: "+ t.image);}
)*
<EOF> 


}





